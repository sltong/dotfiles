#+title: Emacs Configuration File
#+author: Lao Tong
#+babel: :cache yes
#+property: header-args :tangle yes

* About
This =init.org= document generates =init.el=. This file follows the conventions
of the literate programming style. As you read this document, you will encounter
commentary on source code blocks. The =init.el= file is generated through Org
Mode's Babel feature. It "tangles" source code blocks by loading them onto an
external file (in this case, the =init.el= file).

Most of the code blocks in this document will have been included in the
generated =init.el= file, but there are certain exceptions identifiable by a
=:tangle no= or =:eval no= in the source block head.

#+tl;dr: This document provides source code blocks of my =init.el= & commentary.

* Initialization
** Lexical Binding
Enable lexical binding:

#+begin_src elisp
;;; -*- lexical-binding: t -*-
#+end_src

** Startup Configuration
#+begin_src elisp
(defvar file-name-handler-alist-original file-name-handler-alist)
(setq file-name-handler-alist nil)
(add-hook 'emacs-startup-hook
  (lambda ()
    (setq file-name-handler-alist file-name-handler-alist-original)))
(add-hook 'emacs-startup-hook
          (lambda () (setq gc-cons-threshold (* 16 1024 1024)))) ; set `gc-cons-threshold' to
(setq load-prefer-newer t)
(setq inhibit-startup-screen t)
(setq inhibit-startup-echo-area-message user-login-name)
(setq inhibit-default-init t)
(setq native-comp-async-report-warnings-errors 'silent)
(setq-default cursor-in-non-selected-windows nil)
(setq-default frame-resize-pixelwise t) ; set pixelwise resizing
(setq highlight-nonselected-windows nil)
(setq inhibit-compacting-font-caches t)
(setq initial-major-mode 'fundamental-mode)
(setq initial-scratch-message nil)
(setq-default global-auto-revert-non-file-buffers t)
(setq-default kill-do-not-save-duplicates t) ; don't save duplicate entries in kill ring
(setq kill-ring-max 500)
(setq-default auto-revert-interval 3) ; 3 seconds to check autoreverts
(setq-default echo-keystrokes 0.4)
(setq-default enable-recursive-minibuffers t)
(setq-default read-process-output-max (* 2 1024 1024)) ; allow reading 2MB from subprocesses
(setq-default scroll-preserve-screen-position t)
(setq-default sentence-end-double-space nil)
(setq-default indent-tabs-mode nil) ; don't indent tabs automatically
(setq-default tab-always-indent 'complete) ; indent first, then try to complete at point
(setq-default tab-width 4)
(setq-default truncate-lines t) ; never display continuation lines
(setq-default use-dialog-box nil)
(setq-default vc-follow-symlinks nil)
(setq-default large-file-warning-threshold (* 1024 1024 100)) ; no warning until file is 100MB
(setq use-short-answers t) ; make /yes/ or /no/ choices into /y/ or /n/
#+end_src

** Files and Directories
*** Emacs Files and Directories
#+begin_src elisp
(defconst dotfiles-directory (expand-file-name "~/.dotfiles"))
(setq user-emacs-directory (expand-file-name "emacs/.emacs.d/" dotfiles-directory))
(defvar snippets-directory
  (expand-file-name "snippets" user-emacs-directory))
(defvar user-init-org-file (expand-file-name "init.org" user-emacs-directory))
(defvar user-init-file (expand-file-name "init.el" user-emacs-directory))
(defun open-init-org-file ()
  "Open the =init.org= file in the emacs directory."
  (interactive)
  (find-file user-init-org-file))
#+end_src

**** Theme Files and Directories
#+begin_src elisp
(defvar user-emacs-theme-directory (expand-file-name "etc/themes" user-emacs-directory))
(add-to-list 'custom-theme-load-path user-emacs-theme-directory)
(defvar lao/minerva-theme-file (expand-file-name "etc/themes/minerva-theme.el" user-emacs-directory))
(defun open-minerva-theme-file ()
  "Open the =Minerva= theme file in the emacs directory."
  (interactive)
  (find-file lao/minerva-theme-file))
#+end_src

*** Configuration Files and Directories
#+begin_src elisp
(defconst config-directory (expand-file-name "~/.config"))
(defvar lao/sway-config (expand-file-name "sway/config" config-directory))
(defvar lao/waybar-config (expand-file-name "waybar/config" config-directory))
(defvar lao/zshrc-config (expand-file-name "~/.zshrc"))
(defvar lao/zshenv-file (expand-file-name "~/.zshenv"))
(defun open-sway-config ()
  "Open the sway configuration file."
  (interactive)
  (find-file lao/sway-config))
(defun open-waybar-config ()
  "Open the waybar configuration file."
  (interactive)
  (find-file lao/waybar-config))
(defun open-zshrc-config ()
  "Open the .zshrc configuration file."
  (interactive)
  (find-file lao/zshrc-config))
#+end_src

** Package Management
*** Package Archives
#+begin_src elisp
(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
#+end_src

*** =use-package= and =straight= Setup
#+begin_src elisp
(setq straight-use-package-by-default t
      straight-check-for-modifications nil)
(unless (featurep 'straight)
  (defvar bootstrap-version)
  (let ((bootstrap-file (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage)))
(straight-use-package 'use-package)
#+end_src

*** Local Packages
#+begin_src elisp
(add-to-list 'load-path (expand-file-name "site-lisp" user-emacs-directory))
(add-to-list 'load-path (expand-file-name "lisp" user-emacs-directory))
#+end_src

** Libraries and Utilities
#+begin_src elisp
(use-package async
  :diminish
  :config (dired-async-mode 1))
(use-package multiple-cursors
  :bind
  ("C-S-c C-S-c" . mc/edit-lines))
(use-package restart-emacs
  :bind
  ("C-c r" . restart-emacs))
(use-package goto-line-preview
  :bind
  ("M-g M-g" . goto-line-preview))
(use-package tiny :defer t)
(use-package gcmh
  :straight (gcmh :type git :host gitlab :repo "koral/gcmh"))
#+end_src

*** Startup Metrics
#+begin_src elisp
(use-package esup
  :ensure t
  ;; To use MELPA Stable use ":pin melpa-stable",
  :pin melpa)
#+end_src

** Org Mode Configuration
#+begin_src elisp
(use-package org
  :straight (:type built-in)
  :bind
  (:map org-mode-map ("M-<up>" . org-shiftup)
                     ("M-<down>" . org-shiftdown))
  :config
  (setq org-directory "~/org")
  (setq org-agenda-files (expand-file-name "todo/agendas.org" org-directory))
  (setq org-todo-keywords
        '((sequence "TODO" "IN-PROGRESS" "WAITING" "|" "DONE" "CANCELLED")))
  (setq org-tag-alist '(("@work" . ?w)
                        ("@home" . ?h)
                        ("studygarden" . ?s)))
  (setq org-confirm-babel-evaluate nil)
  (setq org-special-ctrl-a/e t)
  (setq org-display-custom-times t)
  (setq org-adapt-indentation t) ; align content with headlines
  (setq org-edit-src-content-indentation 0) ; align code blocks with markers
  (setq org-indent-indentation-per-level 1)
  (setq org-src-tab-acts-natively t)
  (setq org-src-fontify-natively t)
  (setq org-log-done t)
  (setq org-html-doctype "html5")
  (setq org-startup-indented t)
  (setq org-support-shift-select t)
  (setq org-hide-leading-stars t))
#+end_src

** User and System Information
#+begin_src elisp
(defconst my-laptop-p (equal (system-name) "lamb"))
(setq user-full-name "Lao Tong"
      user-mail-address "lao.s.t@pm.me")
#+end_src

** =.emacs.d= Configuration
*** Custom File
#+begin_src elisp
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(load custom-file)
#+end_src

*** No Littering
#+begin_src elisp
(use-package no-littering)
#+end_src

*** Backup and Autosave
#+begin_src elisp
(setq delete-old-versions -1)
(setq version-control t)
(setq vc-make-backup-files t)
(defconst emacs-autosave-directory
  (concat user-emacs-directory "auto-save/"))
(setq backup-directory-alist
      `((".*" . ,emacs-autosave-directory)))
(setq auto-save-file-name-transforms
      `((".*" ,emacs-autosave-directory t)))
#+end_src

** Authorization and Security
#+begin_src elisp
(setq-default auth-sources '((:source "~/authinfo.gpg"))
              epg-gpg-home-directory "~/.gnupg"
              epg-gpg-program "gpg2"
              epg-pinentry-mode 'loopback)
#+end_src

** Environment Variables
Get environment variables from shell with =exec-path-from-shell=:

#+begin_src elisp
(use-package exec-path-from-shell
  :commands exec-path-from-shell-initialize
  :if (memq window-system '(mac ns))
  :config
  (exec-path-from-shell-initialize))
#+end_src

** Initial Modes
#+begin_src elisp
(global-auto-revert-mode t) ; always revert buffers when a file changes
(global-so-long-mode t) ; avoid performance issues with files with long names
(display-time-mode t) ; always show the time
(savehist-mode) ; save point at files
(delete-selection-mode t)
;;(pixel-scroll-precision-mode) ; smooth pixel by pixel scrolling
#+end_src

*** Savehist
#+begin_src elisp
(use-package savehist :init (savehist-mode))
#+end_src

*** Desktop Mode
*** TODO fix 'Wrong type argument: hash-table-p, "Unprintable entity"' error
#+begin_src elisp :tangle no
(desktop-save-mode 1) ; persistent windows and frames upon restart
#+end_src

** Initial Hooks
#+begin_src elisp
(add-hook 'after-save-hook
          (lambda ()
            (when (equal buffer-file-name user-init-org-file)
              (org-babel-load-file user-init-org-file))))
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+end_src

* Packages
** Built-in Packages
*** Recent Files
#+begin_src elisp
(use-package recentf
  :config
  (setq recentf-max-saved-items 300)
  (setq recentf-max-menu-items 10)
  :init
  (recentf-mode))
#+end_src

*** Diminish and Delight
#+begin_src elisp
(use-package diminish)
(use-package delight)
#+end_src

*** Whitespace
#+begin_src elisp
(use-package whitespace
  :diminish global-whitespace-mode
  :config
  (setq whitespace-line-column nil)
  (setq whitespace-style '(face indentation
                           tabs tab-mark
                           spaces space-mark
                           newline
                           trailing lines-tail))
  (setq whitespace-display-mappings
   '((tab-mark ?\t [?› ?\t])
     (newline-mark ?\u2B90 [?\u23ce])
     (space-mark ?\u3000 [?\u25a1])))
  (setq whitespace-space-regexp "\\(\u3000+\\)")
  :init
  (global-whitespace-mode))
#+end_src

*** Winner
#+begin_src elisp
(use-package winner
  :init (winner-mode))
#+end_src

*** Ibuffer
#+begin_src elisp
(use-package ibuffer
  :bind ("C-x C-b" . ibuffer))
#+end_src

*** Dired
#+begin_src elisp
(use-package dired
  :straight (:type built-in)
  :bind (:map dired-mode-map
              ("M-+" . dired-create-empty-file))
  :config
  (setq dired-listing-switches "-ahl"))
(use-package dired-x
  :straight (:type built-in)
  :after dired)
#+end_src

*** Hippie Expand
#+begin_src elisp
(use-package hippie-exp
  :straight (:type built-in)
  :bind ("M-/" . hippie-expand))
#+end_src

*** Electric Pair Mode
#+begin_src elisp
(electric-pair-mode)
#+end_src

*** Tramp
#+begin_src elisp
(use-package tramp
  :defer t
  :custom
  (tramp-default-method "ssh")
  (tramp-encoding-shell "/bin/zsh")
  (tramp-verbose 5))
#+end_src

*** Flymake
#+begin_src elisp
(use-package flymake
  :straight (:type built-in)
  :defer t)
#+end_src

*** El Doc
#+begin_src elisp
(use-package eldoc
  :straight (:type built-in)
  :diminish
  :commands turn-on-eldoc-mode
  :hook ((emacs-lisp-mode . turn-on-eldoc-mode)
         (lisp-interaction-mode . turn-on-eldoc-mode)
         (ielm-mode . turn-on-eldoc-mode)))
#+end_src

*** Man
#+begin_src elisp
(setenv "MANWIDTH" "80")
#+end_src

*** EWW
#+begin_src elisp
(use-package eww
  :straight (:type built-in)
  :config
  (setq shr-use-fonts nil)
  (setq shr-use-colors nil))
#+end_src

*** URL
#+begin_src elisp
(use-package url
:straight (:type built-in))
#+end_src

** Completions
#+begin_src elisp
(setq completion-cycle-threshold 3 ; 3 completion candidates
      completion-ignore-case t
      read-buffer-completion-ignore-case t
      read-file-name-completion-ignore-case t)
#+end_src

*** Which Key
#+begin_src elisp
(use-package which-key
  :defer t
  :commands which-key-mode
  :init (which-key-mode)
  :diminish)
#+end_src

*** Dabbrev
#+begin_src elisp
(use-package dabbrev
    :bind (("C-<tab>" . dabbrev-expand)
           (:map minibuffer-local-map ("C-<tab>" . dabbrev-expand)))
    :custom
(dabbrev-ignored-buffer-regexps '("\\.\\(?:pdf\\|jpe?g\\|png\\)\\'")))
#+end_src

*** Consult
#+begin_src elisp
(use-package consult
   :demand t
   :bind (;; C-c bindings (mode-specific-map)
          ("C-c h" . consult-history)
          ("C-c m" . consult-mode-command)
          ("C-c k" . consult-kmacro)
          ;; C-x bindings (ctl-x-map)
          ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
          ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
          ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
          ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
          ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
          ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
          ;; Custom M-# bindings for fast register access
          ("M-#" . consult-register-load)
          ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
          ("C-M-#" . consult-register)
          ;; Other custom bindings
          ("M-y" . consult-yank-pop)                ;; orig. yank-pop
          ("<help> a" . consult-apropos)            ;; orig. apropos-command
          ;; M-g bindings (goto-map)
          ("M-g e" . consult-compile-error)
          ("M-g f" . consult-flymake)
          ("M-g g" . consult-goto-line)             ;; orig. goto-line
          ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
          ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
          ("M-g m" . consult-mark)
          ("M-g k" . consult-global-mark)
          ("M-g i" . consult-imenu)
          ("M-g I" . consult-imenu-multi)
          ;; M-s bindings (search-map)
          ("M-s d" . consult-find)
          ("M-s D" . consult-locate)
          ("M-s g" . consult-grep)
          ("M-s G" . consult-git-grep)
          ("M-s r" . consult-ripgrep)
          ("M-s l" . consult-line)
          ("M-s L" . consult-line-multi)
          ("M-s m" . consult-multi-occur)
          ("M-s k" . consult-keep-lines)
          ("M-s u" . consult-focus-lines)
          ;; Isearch integration
          ("M-s e" . consult-isearch-history)
          :map isearch-mode-map
          ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
          ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
          ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
          ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
          ;; Minibuffer history
          :map minibuffer-local-map
          ("M-s" . consult-history)                 ;; orig. next-matching-history-element
          ("M-r" . consult-history))                ;; orig. previous-matching-history-element

   ;; Enable automatic preview at point in the *Completions* buffer. This is
   ;; relevant when you use the default completion UI.
   :hook (completion-list-mode . consult-preview-at-point-mode)
   :init

   ;; Optionally configure the register formatting. This improves the register
   ;; preview for `consult-register', `consult-register-load',
   ;; `consult-register-store' and the Emacs built-ins.
   (setq register-preview-delay 0.5
         register-preview-function #'consult-register-format)

   ;; Optionally tweak the register preview window.
   ;; This adds thin lines, sorting and hides the mode line of the window.
   (advice-add #'register-preview :override #'consult-register-window)

   ;; Use Consult to select xref locations with preview
   (setq xref-show-xrefs-function #'consult-xref
         xref-show-definitions-function #'consult-xref)

   ;; Configure other variables and modes in the :config section,
   ;; after lazily loading the package.
   :config

   ;; For some commands and buffer sources it is useful to configure the
   ;; :preview-key on a per-command basis using the `consult-customize' macro.
   (consult-customize
    consult-theme
    :preview-key '(:debounce 0.2 any)
    consult-ripgrep consult-git-grep consult-grep
    consult-bookmark consult-recent-file consult-xref
    consult--source-bookmark consult--source-recent-file
    consult--source-project-recent-file
    :preview-key (kbd "M-."))

   ;; Optionally configure the narrowing key.
   ;; Both < and C-+ work reasonably well.
   (setq consult-narrow-key "<") ;; (kbd "C-+")
   (autoload 'projectile-project-root "projectile")
   (setq consult-project-function (lambda (_) (projectile-project-root))))
#+end_src

**** =consult-dir=
#+begin_src elisp
(use-package consult-dir
  :after consult
  :bind (("C-x C-d" . consult-dir)
         :map minibuffer-local-completion-map
         ("C-x C-d" . consult-dir)
         ("C-x C-j" . consult-dir-jump-file)))
#+end_src

**** =consult-eglot=
#+begin_src elisp
(use-package consult-eglot
  :after (consult eglot))
#+end_src

**** =consult-projectile=
#+begin_src elisp
(use-package consult-projectile
  :after (consult projectile))
#+end_src

*** Vertico
#+begin_src elisp
(use-package vertico
  :straight (vertico :files (:defaults "extensions/*")
                     :includes (vertico-indexed
                                vertico-flat
                                vertico-grid
                                vertico-mouse
                                vertico-quick
                                vertico-buffer
                                vertico-repeat
                                vertico-reverse
                                vertico-directory
                                vertico-multiform
                                vertico-unobtrusive))
  :commands vertico-mode
  :bind
  (:map vertico-map
        ("?" . minibuffer-completion-help)
        ("M-RET" . minibuffer-force-complete-and-exit)
        ("M-TAB" . minibuffer-complete))
  :init
  (vertico-mode))
#+end_src

**** Vertico Extensions
***** Vertico Directory
#+begin_src elisp
(use-package vertico-directory
  :straight nil
  :after vertico
  :bind (:map vertico-map
              ("RET" . vertico-directory-enter)
              ("DEL" . vertico-directory-delete-char)
              ("M-DEL" . vertico-directory-delete-word))
  :hook (rfn-eshadow-update-overlay . vertico-directory-tidy))
#+end_src

***** Vertico Mouse
#+begin_src elisp
 (use-package vertico-mouse
   :straight nil
   :after vertico)
#+end_src

*** Orderless
#+begin_src elisp
(use-package orderless
  :demand t
  :init
  (setq completion-styles '(substring orderless basic))
  (setq completion-category-defaults nil)
  (setq completion-category-overrides '((file (styles basic partial-completion))
                                        (eglot (styles . (orderless)))))
  :config
  (setq orderless-component-separator "[ &]")
  (setq completion-styles '(orderless)
        completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src

*** Marginalia
#+begin_src elisp
(use-package marginalia
  :defer t
  :commands marginalia-mode
  :bind (("M-A" . marginalia-cycle)
         :map minibuffer-local-map
         ("M-A" . marginalia-cycle))
  :init (marginalia-mode)
  :config
  (setq marginalia-field-width 100))
#+end_src

*** Corfu
#+begin_src elisp
(use-package corfu
  :demand t
  :config
  (defun corfu-enable-in-minibuffer ()
    "Enable Corfu in the minibuffer if `completion-at-point' is bound."
    (when (where-is-internal #'completion-at-point (list (current-local-map)))
      ;; (setq-local corfu-auto nil) Enable/disable auto completion
      (corfu-mode 1)))
  (add-hook 'minibuffer-setup-hook #'corfu-enable-in-minibuffer)
  (defun corfu-enable-always-in-minibuffer ()
    "Enable Corfu in the minibuffer if Vertico/Mct are not active."
    (unless (or (bound-and-true-p mct--active)
                (bound-and-true-p vertico--input))
      (corfu-mode 1)))
  (add-hook 'minibuffer-setup-hook #'corfu-enable-always-in-minibuffer 1)
  :custom
  (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
  (corfu-auto t)                 ;; Enable auto completion
  (corfu-preselect-first nil)
  (corfu-separator ?\s)          ;; Orderless field separator
  :bind
  ;; Configure SPC for separator insertion
  (:map corfu-map
        ("SPC" . corfu-insert-separator)
        ("M-n" . corfu-next)
        ("M-p" . corfu-previous))
  :init
  (global-corfu-mode))
 #+end_src


*** Emacs Completion Configuration
#+begin_src elisp
(use-package emacs
  :init
  ;; TAB cycle if there are only few candidates
  (setq completion-cycle-threshold 3)
  ;; Emacs 28: Hide commands in M-x which do not apply to the current mode.
  ;; Corfu commands are hidden, since they are not supposed to be used via M-x.
  (setq read-extended-command-predicate
        #'command-completion-default-include-p)

  ;; Enable indentation+completion using the TAB key.
  ;; `completion-at-point' is often bound to M-TAB.
  (setq tab-always-indent 'complete))
#+end_src

** Search, Pattern Matching, and Regular Expressions
*** =anzu=
#+begin_src elisp
(use-package anzu
  :diminish
  :config
  (global-anzu-mode +1))

#+end_src

*** =visual-regexp=
#+begin_src elisp
(use-package visual-regexp
  :bind (("C-c r" . vr/replace)
         ("C-c q" . vr/query-replace)
         ("M-%" . vr/query-replace)
         ("C-c m" . vr/mc-mark)))
(use-package visual-regexp-steroids
  :bind (:map esc-map
              ("C-r" . vr/isearch-backward)
              ("C-s" . vr/isearch-forward)))
#+end_src

*** ripgrep
#+begin_src elisp
(use-package rg :defer t)
#+end_src

** Selection
*** =multiple-cursors=
#+begin_src elisp
(use-package multiple-cursors
  :bind (("C-S-c C-S-c" . mc/edit-lines)
         ("C->"         . mc/mark-next-like-this)
         ("C-<"         . mc/mark-previous-like-this)
         ("C-c C-<"     . mc/mark-all-like-this)))
#+end_src

** Undo
#+begin_src elisp
(use-package undo-tree
  :diminish
  :init
  (global-undo-tree-mode))
#+end_src

** Snippets
#+begin_src elisp
(use-package yasnippet :defer t)
#+end_src

** Terminal Emulation
*** Vterm
#+begin_src elisp
(use-package vterm
  :bind
  (:map vterm-mode-map
        ("C-t" . vterm-send-next-key))
  :config
  (setq vterm-timer-delay 0.01)
  (setq vterm-copy-exclude-prompt t)
  (setq vterm-kill-buffer-on-exit t)
  (setq vterm-max-scrollback 4000)
  :init
  (setq vterm-always-compile-module t))
#+end_src

*** =multi-vterm=
#+begin_src elisp
(use-package multi-vterm
  :init
  (add-hook 'vterm-mode-hook (lambda () (hl-line-mode -1)))
  :bind
  ("C-c t t" . multi-vterm)
  ("C-c t v" . multi-vterm-dedicated-toggle)
  ("C-c t n" . multi-vterm-next)
  ("C-c t p" . multi-vterm-prev)
  ("C-x p t" . multi-vterm-project)
  :config
  (setq multi-vterm-program "/bin/zsh"))
#+end_src

*** Eshell Vterm
#+begin_src elisp
(use-package eshell-vterm
  :load-path "site-lisp/eshell-vterm"
  :after (eshell vterm)
  :commands eshell-vterm-mode
  :config
  (eshell-vterm-mode))
#+end_src

*** =eshell-prompt-extras=
#+begin_src elisp
(use-package eshell-prompt-extras
  :commands (eshell-highlight-prompt eshell-prompt-function)
  :config
  (with-eval-after-load "esh-opt"
    (autoload 'epe-theme-lambda "eshell-prompt-extras")
    (setq eshell-highlight-prompt nil
          eshell-prompt-function 'epe-theme-lambda)))
#+end_src

** Perspective
#+begin_src elisp
(use-package perspective
  :commands persp-mode
  :bind (("C-x b" . persp-switch-to-buffer*)
         ("C-x k" . persp-kill-buffer*)
         ("C-x C-b" . persp-ibuffer)
         ("C-x M-p" . persp-mode-prefix-key))
  :custom
  (persp-mode-prefix-key (kbd "C-c M-p"))
  :init
  (persp-mode))
#+end_src

** Magit
#+begin_src elisp
(use-package magit :defer t)
#+end_src

*** =magit-todos=
#+begin_src elisp
(use-package magit-todos :after magit)
#+end_src

** Project Management
#+begin_src elisp
(use-package projectile
  :diminish
  :init
  (setq projectile-mode-line-function '(lambda () (format " [%s]" (projectile-project-name))))
  (projectile-mode +1)
  :bind-keymap (("s-p" . projectile-command-map)
                ("C-c p" . projectile-command-map)))
#+end_src

** Software Development
*** EditorConfig
#+begin_src elisp
(use-package editorconfig
  :diminish
  :config
  (editorconfig-mode 1))
#+end_src

*** LSP
**** Eglot
#+begin_src elisp
(use-package eglot
  :defer t)
#+end_src

*** Docker
#+begin_src elisp
(use-package docker
  :bind ("C-c d" . docker))
#+end_src

*** =paredit=
#+begin_src elisp
(use-package paredit)
#+end_src

*** =dart-mode=
#+begin_src elisp
(use-package dart-mode
  :mode "\\.dart\\'")
#+end_src

*** CSS Mode
#+begin_src elisp
(setq css-indent-offset 2)
#+end_src

*** JS Mode
#+begin_src elisp
(setq js-indent-level 2)
#+end_src

*** Web Mode
#+begin_src elisp
(use-package web-mode
  :mode ("\\(\\.html?\\|\\.njk\\)\\'"
         "\\.jsx?$"
         "\\.tsx?$"
         "\\.phtml\\'"
         "\\.tpl\\.php\\'"
         "\\.mustache\\'"
         "\\.djhtml\\'")
  :config
  (setq web-mode-markup-indent-offset 2)
  (setq web-mode-code-indent-offset 2)
  (setq web-mode-css-indent-offset 2)
  (setq web-mode-enable-current-element-highlight t)
  (setq web-mode-enable-current-column-highlight t)
  (setq web-mode-ac-sources-alist
        '(("css" . (ac-source-css-property))
          ("html" . (ac-source-words-in-buffer ac-source-abbrev))))
  (setq web-mode-content-types-alist '(("jsx" . "\\.js[x]?\\'"))))
#+end_src

*** JSON Mode
#+begin_src elisp
(use-package json-mode :defer t)
#+end_src

*** YAML Mode
#+begin_src elisp
(use-package yaml-mode :defer t)
#+end_src

*** Python
#+begin_src elisp
(use-package python
  :defer t
  :straight (:type built-in)
  :delight (python-mode "py")
  :config
  (setq python-indent-guess-indent-offset nil))
#+end_src

**** Elpy
#+begin_src elisp
(use-package elpy
  :defer t
  :init
  (elpy-enable))
#+end_src

**** Black
#+begin_src elisp
(use-package python-black
  :after python
  :hook (python-mode . python-black-on-save-mode-enable-dwim))
#+end_src

** Calendar
#+begin_src elisp
(use-package calfw :defer t)
(use-package calfw-org :after (calfw org))
#+end_src

** Org Mode
*** Org Super Agenda
#+begin_src elisp
(use-package org-super-agenda
  :after org-mode
  :hook (org-agenda-mode . org-super-agenda-mode)
  :config
  (let ((org-super-agenda-groups
       '((:name "Today"  ; Optionally specify section name
                :time-grid t  ; Items that appear on the time grid
                :todo "TODAY")  ; Items that have this TODO keyword
         (:name "Important"
                ;; Single arguments given alone
                :tag "bills"
                :priority "A")
         ;; Set order of multiple groups at once
         (:order-multi (2 (:name "Shopping in town"
                                 ;; Boolean AND group matches items that match all subgroups
                                 :and (:tag "shopping" :tag "@town"))
                          (:name "Food-related"
                                 ;; Multiple args given in list with implicit OR
                                 :tag ("food" "dinner"))
                          (:name "Personal"
                                 :habit t
                                 :tag "personal")
                          (:name "Space-related (non-moon-or-planet-related)"
                                 ;; Regexps match case-insensitively on the entire entry
                                 :and (:regexp ("space" "NASA")
                                               ;; Boolean NOT also has implicit OR between selectors
                                               :not (:regexp "moon" :tag "planet")))))
         ;; Groups supply their own section names when none are given
         (:todo "WAITING" :order 8)  ; Set order of this section
         (:todo ("SOMEDAY" "TO-READ" "CHECK" "TO-WATCH" "WATCHING")
                ;; Show this group at the end of the agenda (since it has the
                ;; highest number). If you specified this group last, items
                ;; with these todo keywords that e.g. have priority A would be
                ;; displayed in that group instead, because items are grouped
                ;; out in the order the groups are listed.
                :order 9)
         (:priority<= "B"
                      ;; Show this section after "Today" and "Important", because
                      ;; their order is unspecified, defaulting to 0. Sections
                      ;; are displayed lowest-number-first.
                      :order 1)
         ;; After the last group, the agenda will display items that didn't
         ;; match any of these groups, with the default order position of 99
         )))
    (org-agenda nil "a")))
(use-package org-indent
  :straight (:type built-in)
  :defer t
  :config
  (add-hook 'org-indent-mode-hook (lambda () (diminish 'org-indent-mode))))
#+end_src

*** Org CalDAV
#+begin_src elisp
(use-package org-caldav
  :defer t
  :after org-mode
  :config
  (setq org-caldav-url "https://next.dao/remote.php/dav/calendars/lao"
        org-caldav-calendar-id "org"
        org-caldav-inbox (expand-file-name "calendar/inbox.org" org-directory)
        org-caldav-files `(,(expand-file-name "todo/todo.org" org-directory))))
#+end_src

** Aesthetics
For making Emacs look /good/.

#+begin_src elisp
(setq x-stretch-cursor t ; stretch cursor to size of glyph under it
      x-gtk-resize-child-frames t)
#+end_src

*** Fonts
#+begin_src elisp
(set-face-font 'fixed-pitch-serif "Source Code Pro Medium")
(add-to-list 'default-frame-alist '(font . "JetBrains Mono"))
#+end_src

*** Date and Time
#+begin_src elisp
(setq display-time-24hr-format t) ; military time
(setq display-time-day-and-date t) ; show date and time
#+end_src

*** Fringes
Keep fringes to a minimum:

#+begin_src elisp
(fringe-mode '(1 . 1))
#+end_src

*** Fill Column
#+begin_src elisp
(setq-default fill-column 80)
#+end_src

*** Cursor
#+begin_src elisp
(setq cursor-type 'box)
(setq blink-cursor-mode nil)
#+end_src

*** Mode Line
#+begin_src elisp
(setq column-number-mode t
      display-time-default-load-average nil)
(setq mode-line-format '(("%e"
                          mode-line-front-space
                          sml/pos-id-separator
                          mode-line-client
                          mode-line-modified
                          mode-line-remote
                          mode-line-frame-identification
                          mode-line-buffer-identification
                          sml/pos-id-separator
                          (vc-mode vc-mode)
                          sml/pre-modes-separator mode-line-modes mode-line-misc-info mode-line-end-spaces)))
(use-package smart-mode-line
  :init
  (setq sml/theme 'respectful)
  (setq sml/line-number-format "%3l ")
  (setq sml/col-number-format "%3c")
  (setq sml/mule-info nil)
  (setq sml/shorten-directory t)
  (setq sml/shorten-modes t)
  (setq sml/name-width 32)
  (setq sml/mode-width 'full)
  (setq sml/extra-filler -1)
  (setq sml/directory-truncation-string "")
  (sml/setup))
#+end_src

*** Emojify
#+begin_src elisp
(use-package emojify :defer t)
#+end_src

*** Prettify Symbols
Prettify some Greek symbols.
#+begin_src elisp
(setq-default prettify-symbols-alist
              '(("lambda" . ?λ)
                ("delta" . ?Δ)
                ("gamma" . ?Γ)
                ("phi" . ?φ)
                ("psi" . ?ψ)))
#+end_src

*** SVG Tags
#+begin_src elisp
(use-package svg-tag-mode
  :defer t
  :init
  (setq svg-tag-tags '(("TODO" . ((lambda (tag) (svg-tag-make "TODO" :face 'org-todo :inverse t))))
                       ("CANCELLED" . ((lambda (tag) (svg-tag-make "CANCELLED" :face 'org-cancelled :inverse t))))
                       ("DONE" . ((lambda (tag) (svg-tag-make "DONE" :face 'org-done :inverse t)))))))
#+end_src

*** Icons
#+begin_src elisp
(use-package all-the-icons
  :if (display-graphic-p)
  :defer t
  :commands all-the-icons-install-fonts
  :config
  (setq all-the-icons-scale-factor 1.1)
  (when (not (member "all-the-icons" (font-family-list)))
    (all-the-icons-install-fonts t)))
#+end_src

*** Dashboard
#+begin_src elisp
(use-package dashboard
  :commands dashboard-setup-startup-hook
  :init
  (setq dashboard-startup-banner [0])
  (setq dashboard-center-content t)
  (setq dashboard-items '((agenda . 5)
                          (projects . 5)
                          (recents  . 5)
                          (bookmarks . 5)
                          (registers . 5)))
  (setq dashboard-bookmarks-item-format "%s")
  (setq dashboard-footer-messages
        '("Purity of the heart is to will one thing."
          "Every good and every perfect gift is from above."
          "Love shall cover a multitude of sins."))
  (setq dashboard-footer-icon "")
  (dashboard-setup-startup-hook))
#+end_src

*** Internationalization
#+begin_src elisp
(use-package pangu-spacing
  :diminish pangu-spacing-mode
  :commands global-pangu-spacing-mode
  :init (global-pangu-spacing-mode 1)
  :config (setq pangu-spacing-real-insert-separtor t))
#+end_src

*** Indent Guide
#+begin_src elisp
(use-package highlight-indentation
  :commands  highlight-indentation-mode highlight-indentation-current-column-mode
  :hook ((prog-mode . highlight-indentation-mode)
         (org-mode . highlight-indentation-mode))
  :diminish)
#+end_src

*** Page Break Line
#+begin_src elisp
(use-package page-break-lines
  :diminish
  :commands global-page-break-lines-mode
  :init (global-page-break-lines-mode))
#+end_src

*** =diff-hl=
#+begin_src elisp
(use-package diff-hl
  :defer t
  :config (global-diff-hl-mode))
#+end_src

*** Colors
#+begin_src elisp
(use-package kurecolor :defer t)
(use-package ct
  :defer t
  :straight (ct
             :host github
             :repo "neeasade/ct.el"
             :branch "master"))
#+end_src

*** Rainbow Mode
For hex colors:

#+begin_src elisp
(use-package rainbow-mode
  :hook ((org-mode . rainbow-mode)
         (prog-mode . rainbow-mode))
  :diminish)
#+end_src

*** Rainbow Delimiters
#+begin_src elisp
(use-package rainbow-delimiters
  :commands rainbow-delimiters-mode
  :hook ((org-mode . rainbow-delimiters-mode)
         (prog-mode . rainbow-delimiters-mode))
  :diminish rainbow-delimiters-mode)
#+end_src

** Miscellaneous
#+begin_src elisp
(use-package dissociate
  :straight (:type built-in)
  :defer t
  :bind
  ("s-D" . dissociated-press))
#+end_src

* Keybindings
#+begin_src elisp
(bind-key "s-o" 'other-window)
(bind-key "C-c c i" 'open-init-org-file)
(bind-key "C-c c s" 'open-sway-config)
(bind-key "C-c c t" 'open-minerva-theme-file)
(bind-key "C-c c z" 'open-zshrc-config)
(bind-key "C-<backspace>" (lambda () (interactive (kill-line 0))))
(bind-key "C-c y" 'yank-from-kill-ring)
(bind-key "C-c a" 'org-agenda)
(bind-key "C-h F" 'describe-face)
#+end_src

* Appendix
** Glossary
*** Lexical Binding
Lexical binding concerns the valid environment(s) within which a bound
variable can be referenced. A lexically scoped variable is bound only
under the construct in which it is defined.

Compare the output of these two code blocks, the former with lexical binding and
the latter without:
#+begin_src elisp :tangle no :lexical t
(setq first-day-of-the-universe
      (let ((there-be-light "There was light."))
        (lambda () there-be-light)))
(funcall first-day-of-the-universe)
#+end_src

#+begin_src elisp :tangle no :lexical nil
(setq first-day-of-the-universe
      (let ((there-be-light "There was (maybe) light."))
        (lambda () there-be-light)))
(funcall first-day-of-the-universe)
;; error→  Symbol's value as variable is void: there-be-light
#+end_src

Why is the value of =there-be-light= void in the second code block? It is bound
only within the =let= form.

It's kind of like the air inside of a bubble. It will exist as long as
the bubble maintains its form until the bubble pops. The air will
still exist but it won't be air inside the bubble anymore. Lexically
scoped variables are like that too.

A good question to ask yourself if you want to remember the difference between
lexical and dynamic scoping is this: is the variable "globally" accessible?
