#+title: Emacs Configuration File
#+author: Lao Tong
#+babel: :cache yes
#+property: header-args :tangle yes

* About
This =init.org= document generates =init.el=. This file follows the conventions
of the literate programming style. As you read this document, you will encounter
commentary on source code blocks. The =init.el= file is generated through Org
Mode's Babel feature. It "tangles" source code blocks by loading them onto an
external file (in this case, the =init.el= file).

Most of the code blocks in this document will have been included in the
generated =init.el= file, but there are certain exceptions identifiable by a
=:tangle no= or =:eval no= in the source block head.

#+tl;dr: This document provides source code blocks of my =init.el= & commentary.

* Initialization
** File Heading
Init file heading. Also enable lexical binding.

#+begin_src elisp
;;; init.el --- Emacs init file -*- lexical-binding: t -*-
;;; Commentary:
;; My Emacs init file.
;;
;; Code:
#+end_src

** Startup Configuration
#+begin_src elisp
(defvar file-name-handler-alist-original file-name-handler-alist)
(setq file-name-handler-alist nil)
(add-hook 'emacs-startup-hook
  (lambda ()
    (setq file-name-handler-alist file-name-handler-alist-original)))
(add-hook 'emacs-startup-hook
          (lambda () (setq gc-cons-threshold (* 16 1024 1024)))) ; set `gc-cons-threshold' to
;; don't display *Warnings* buffer when native compilation warnings are reported
(setq native-comp-async-report-warnings-errors 'silent)

;; set initial *scratch* buffer major mode to `fundamental-mode'
(setq initial-major-mode 'fundamental-mode)

;; make initial *scratch* buffer empty
(setq initial-scratch-message nil)

;; increase kill ring length
(setq kill-ring-max 500)

;; don't save duplicate entries in kill ring
(setq kill-do-not-save-duplicates t)

;; allow minibuffer commands in the minibuffer
(setq enable-recursive-minibuffers t)

;; preserve point (i.e. cursor) position when scrolling would normally move it off-screen
(setq scroll-preserve-screen-position t)

;; make a single space after a period end sentences
;; relevant for regular expressions (see `sentence-end')
(setq sentence-end-double-space nil)

;; don't indent tabs automatically
(setq-default indent-tabs-mode nil)

;; indent first, then try to complete thing at point
(setq tab-always-indent 'complete)

;; set default tab width
(setq-default tab-width 2)

;; don't display continuation lines, i.e. don't wrap lines
(setq-default truncate-lines t)

;; don't ask for confirmation when following symbolic links
;; but display a warning about it in the minibuffer
(setq vc-follow-symlinks nil)

;; make /yes/ or /no/ choices into /y/ or /n/
(setq use-short-answers t)

;; increase chunksize reads from subprocesses to 2MB
(setq read-process-output-max (* 2 1024 1024))

;; don't use dialog boxes for questions
(setq use-dialog-box nil)

;; don't report large file warning until file is at least 100MB
(setq-default large-file-warning-threshold (* 128 1024 1024))
#+end_src

** Files and Directories
*** Emacs Files and Directories
#+begin_src elisp
(defconst dotfiles-directory (expand-file-name "~/.dotfiles"))
(setq user-emacs-directory (expand-file-name "emacs/.emacs.d/" dotfiles-directory))
(defvar snippets-directory
  (expand-file-name "snippets" user-emacs-directory))
(defvar user-init-org-file (expand-file-name "init.org" user-emacs-directory))
(defvar user-init-file (expand-file-name "init.el" user-emacs-directory))
(defun open-init-org-file ()
  "Open the =init.org= file in the emacs directory."
  (interactive)
  (find-file user-init-org-file))
#+end_src

**** Theme Files and Directories
#+begin_src elisp
(defvar user-emacs-theme-directory (expand-file-name "etc/themes" user-emacs-directory))
(add-to-list 'custom-theme-load-path user-emacs-theme-directory)
(defvar lao/minerva-theme-file (expand-file-name "etc/themes/minerva-theme.el" user-emacs-directory))
(defun open-minerva-theme-file ()
  "Open the =Minerva= theme file in the emacs directory."
  (interactive)
  (find-file lao/minerva-theme-file))
#+end_src

*** Configuration Files and Directories
#+begin_src elisp
(defconst config-directory (expand-file-name "~/.config"))
(defvar lao/sway-config (expand-file-name "sway/config" config-directory))
(defvar lao/waybar-config (expand-file-name "waybar/config" config-directory))
(defvar lao/zshrc-config (expand-file-name "~/.zshrc"))
(defvar lao/zshenv-file (expand-file-name "~/.zshenv"))
(defun open-sway-config ()
  "Open the sway configuration file."
  (interactive)
  (find-file lao/sway-config))
(defun open-waybar-config ()
  "Open the waybar configuration file."
  (interactive)
  (find-file lao/waybar-config))
(defun open-zshrc-config ()
  "Open the .zshrc configuration file."
  (interactive)
  (find-file lao/zshrc-config))
#+end_src

** Package Management
*** Package Archives
#+begin_src elisp
(require 'package)
(unless (assoc-default "melpa" package-archives)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t))
(package-initialize)
#+end_src

*** =use-package= and =straight= Setup
#+begin_src elisp
(unless (package-installed-p 'use-package)
  (package-install 'use-package))
(eval-when-compile
  (require 'use-package))
(setq use-package-verbose t)
(setq use-package-always-ensure t)
#+end_src

*** Local Packages
#+begin_src elisp
(add-to-list 'load-path (expand-file-name "site-lisp" user-emacs-directory))
(add-to-list 'load-path (expand-file-name "lisp" user-emacs-directory))
#+end_src

** Libraries and Utilities
#+begin_src elisp
(use-package restart-emacs
  :bind
  ("C-c r" . restart-emacs))
(use-package goto-line-preview
  :bind
  ("M-g M-g" . goto-line-preview))
(use-package all-the-icons
  :if (display-graphic-p)
  :defer t
  :commands all-the-icons-install-fonts
  :config
  (setq all-the-icons-scale-factor 1.1)
  (when (not (member "all-the-icons" (font-family-list)))
    (all-the-icons-install-fonts t)))
#+end_src

*** Startup Metrics
#+begin_src elisp
(use-package esup)
#+end_src

** Org Mode Configuration
#+begin_src elisp
(use-package org
  :ensure nil
  :bind
  (:map org-mode-map ("M-<up>" . org-shiftup)
        ("M-<down>" . org-shiftdown))
  :config
  (setq org-directory "~/org")
  (setq org-agenda-files (expand-file-name "agendas.org" org-directory))
  (setq org-todo-keywords
        '((sequence "TODO(t)" "DOING(d)" "POSTPONED(p)" "|" "FINISHED(f)" "CANCELLED(c)")))
  (setq org-confirm-babel-evaluate nil)
  (setq org-special-ctrl-a/e t)
  (setq org-display-custom-times t)
  (setq org-adapt-indentation t) ; align content with headlines
  (setq org-edit-src-content-indentation 0) ; align code blocks with markers
  (setq org-indent-indentation-per-level 1)
  (setq org-src-tab-acts-natively t)
  (setq org-src-fontify-natively t)
  (setq org-log-done t)
  (setq org-html-doctype "html5")
  (setq org-startup-indented t)
  (setq org-support-shift-select t)
  (setq org-hide-leading-stars t)
  (setq org-html-head-include-default-style nil)
  (setq org-agenda-category-icon-alist
        '(("appointments" "ÔÅ≥"))))
#+end_src

** User and System Information
#+begin_src elisp
(defconst my-laptop-p (equal (system-name) "lamb"))
(setq user-full-name "Lao Tong"
      user-mail-address "lao.s.t@pm.me")
#+end_src

** =.emacs.d= Configuration
*** Custom File
#+begin_src elisp
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(load custom-file)
#+end_src

*** No Littering
#+begin_src elisp
(use-package no-littering)
#+end_src

*** Backup and Autosave
#+begin_src elisp
(setq delete-old-versions -1)
(setq version-control t)
(setq vc-make-backup-files t)
(defconst emacs-autosave-directory
  (concat user-emacs-directory "auto-save/"))
(defconst emacs-lockfile-directory
  (concat user-emacs-directory "lock-files/"))
(setq backup-directory-alist '(("." . "~/.config/emacs/backups")))
#+end_src

** Authorization and Security
#+begin_src elisp
(setq auth-sources '((:source "~/authinfo.gpg"))
      epg-gpg-home-directory "~/.gnupg"
      epg-gpg-program "gpg2"
      epg-pinentry-mode 'loopback)
#+end_src

** Environment Variables
Get environment variables from shell with =exec-path-from-shell=:

#+begin_src elisp
(use-package exec-path-from-shell
  :commands exec-path-from-shell-initialize
  :if (memq window-system '(mac ns))
  :config
  (exec-path-from-shell-initialize))
#+end_src

** Initial Modes
#+begin_src elisp
(save-place-mode)
(global-auto-revert-mode) ; always revert buffers when a file changes
(global-so-long-mode) ; avoid performance issues with files with long names
(display-time-mode) ; always show the time
(savehist-mode) ; save point at files
(delete-selection-mode) ; replace selection when entering new text
(pixel-scroll-precision-mode) ; smooth pixel by pixel scrolling
#+end_src

*** Savehist
#+begin_src elisp
(use-package savehist :init (savehist-mode))
#+end_src

*** Desktop Mode
*** TODO fix 'Wrong type argument: hash-table-p, "Unprintable entity"' error
#+begin_src elisp :tangle no
(desktop-save-mode 1) ; persistent windows and frames upon restart
#+end_src

** Initial Hooks
#+begin_src elisp
(add-hook 'after-save-hook
          (lambda ()
            (when (equal buffer-file-name user-init-org-file)
              (org-babel-load-file user-init-org-file))))
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+end_src

* Packages
** Built-in Packages
*** =kmacro=
#+begin_src elisp
(use-package kmacro
:ensure nil
;; :straight (:type built-in)
  :bind (:map kmacro-keymap ("I" . kmacro-insert-macro))
  :config
  (defalias 'kmacro-insert-macro 'insert-kbd-macro))
#+end_src

*** Recent Files
#+begin_src elisp
(use-package recentf
  :ensure nil
  :config
  (setq recentf-max-saved-items 300)
  (setq recentf-max-menu-items 10)
  :init
  (recentf-mode))
#+end_src

*** Diminish and Delight
#+begin_src elisp
(use-package diminish :ensure nil)
(use-package delight :ensure nil)
#+end_src

*** Whitespace
#+begin_src elisp
(use-package whitespace
:ensure nil
;; :straight (:type built-in)
  :diminish global-whitespace-mode
  :config
  (setq whitespace-line-column nil)
  (setq whitespace-style '(face indentation
                           tabs tab-mark
                           spaces space-mark
                           newline
                           trailing lines-tail))
  (setq whitespace-display-mappings
   '((tab-mark ?\t [?‚Ä∫ ?\t])
     (newline-mark ?\u2B90 [?\u23ce])
     (space-mark ?\u3000 [?\u25a1])))
  (setq whitespace-space-regexp "\\(\u3000+\\)")
  :hook
  (prog-mode . whitespace-mode))
#+end_src

*** Winner
#+begin_src elisp
(use-package winner
  :ensure nil
  :init (winner-mode))
#+end_src

*** Ibuffer
#+begin_src elisp
(use-package ibuffer
  :ensure nil
;; :straight (:type built-in)
  :bind ("C-x C-b" . ibuffer))
#+end_src

*** Dired
#+begin_src elisp
(use-package dired
  :ensure nil
;; :straight (:type built-in)
  :bind (:map dired-mode-map
              ("M-+" . dired-create-empty-file))
  :config
  (setq dired-listing-switches "-ahl"))
(use-package dired-x
  :ensure nil
;; :straight (:type built-in)
  :after dired)
#+end_src

*** Hippie Expand
#+begin_src elisp
(use-package hippie-exp
  :ensure nil
;; :straight (:type built-in)
  :bind ("M-/" . hippie-expand))
#+end_src

*** Electric Pair Mode
#+begin_src elisp
(electric-pair-mode)
#+end_src

*** Tramp
#+begin_src elisp
(use-package tramp
  :ensure nil
  :defer t
  :custom
  (tramp-default-method "ssh")
  (tramp-encoding-shell "/bin/zsh")
  (tramp-verbose 5))
#+end_src

*** Flymake
#+begin_src elisp
(use-package flymake
  :ensure nil
  :defer t)
#+end_src

*** El Doc
#+begin_src elisp
(use-package eldoc
  :ensure nil
;; :straight (:type built-in)
  :diminish
  :commands turn-on-eldoc-mode
  :hook ((emacs-lisp-mode . turn-on-eldoc-mode)
         (lisp-interaction-mode . turn-on-eldoc-mode)
         (ielm-mode . turn-on-eldoc-mode)))
#+end_src

*** Man
#+begin_src elisp
(setenv "MANWIDTH" "80")
#+end_src

*** EWW
#+begin_src elisp
(use-package eww
  :ensure nil
;; :straight (:type built-in)
  :config
  (setq shr-use-fonts nil)
  (setq shr-use-colors nil))
#+end_src

*** URL
#+begin_src elisp
(use-package url
  :ensure nil)
;; :straight (:type built-in))
#+end_src

** Completions
#+begin_src elisp
(setq completion-cycle-threshold 3 ; 3 completion candidates
      completion-ignore-case t
      read-buffer-completion-ignore-case t
      read-file-name-completion-ignore-case t)
#+end_src

*** Which Key
#+begin_src elisp
(use-package which-key
  :defer t
  :commands which-key-mode
  :init (which-key-mode)
  :diminish)
#+end_src

*** Dabbrev
#+begin_src elisp
(use-package dabbrev
    :bind (("C-<tab>" . dabbrev-expand)
           (:map minibuffer-local-map ("C-<tab>" . dabbrev-expand)))
    :custom
    (dabbrev-ignored-buffer-regexps '("\\.\\(?:pdf\\|jpe?g\\|png\\|webp\\)\\'")))
#+end_src

*** Consult
#+begin_src elisp
(use-package consult
   :demand t
   :bind (;; C-c bindings (mode-specific-map)
          ("C-c h" . consult-history)
          ("C-c m" . consult-mode-command)
          ("C-c k" . consult-kmacro)
          ;; C-x bindings (ctl-x-map)
          ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
          ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
          ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
          ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
          ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
          ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
          ;; Custom M-# bindings for fast register access
          ("M-#" . consult-register-load)
          ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
          ("C-M-#" . consult-register)
          ;; Other custom bindings
          ("M-y" . consult-yank-pop)                ;; orig. yank-pop
          ("<help> a" . consult-apropos)            ;; orig. apropos-command
          ;; M-g bindings (goto-map)
          ("M-g e" . consult-compile-error)
          ("M-g f" . consult-flymake)
          ("M-g g" . consult-goto-line)             ;; orig. goto-line
          ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
          ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
          ("M-g m" . consult-mark)
          ("M-g k" . consult-global-mark)
          ("M-g i" . consult-imenu)
          ("M-g I" . consult-imenu-multi)
          ;; M-s bindings (search-map)
          ("M-s d" . consult-find)
          ("M-s D" . consult-locate)
          ("M-s g" . consult-grep)
          ("M-s G" . consult-git-grep)
          ("M-s r" . consult-ripgrep)
          ("M-s l" . consult-line)
          ("M-s L" . consult-line-multi)
          ("M-s m" . consult-multi-occur)
          ("M-s k" . consult-keep-lines)
          ("M-s u" . consult-focus-lines)
          ;; Isearch integration
          ("M-s e" . consult-isearch-history)
          :map isearch-mode-map
          ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
          ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
          ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
          ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
          ;; Minibuffer history
          :map minibuffer-local-map
          ("M-s" . consult-history)                 ;; orig. next-matching-history-element
          ("M-r" . consult-history))                ;; orig. previous-matching-history-element

   ;; Enable automatic preview at point in the *Completions* buffer. This is
   ;; relevant when you use the default completion UI.
   :hook (completion-list-mode . consult-preview-at-point-mode)
   :init

   ;; Optionally configure the register formatting. This improves the register
   ;; preview for `consult-register', `consult-register-load',
   ;; `consult-register-store' and the Emacs built-ins.
   (setq register-preview-delay 0.5
         register-preview-function #'consult-register-format)

   ;; Optionally tweak the register preview window.
   ;; This adds thin lines, sorting and hides the mode line of the window.
   (advice-add #'register-preview :override #'consult-register-window)

   ;; Use Consult to select xref locations with preview
   (setq xref-show-xrefs-function #'consult-xref
         xref-show-definitions-function #'consult-xref)

   ;; Configure other variables and modes in the :config section,
   ;; after lazily loading the package.
   :config

   ;; For some commands and buffer sources it is useful to configure the
   ;; :preview-key on a per-command basis using the `consult-customize' macro.
   (consult-customize
    consult-theme
    :preview-key '(:debounce 0.2 any)
    consult-ripgrep consult-git-grep consult-grep
    consult-bookmark consult-recent-file consult-xref
    consult--source-bookmark consult--source-recent-file
    consult--source-project-recent-file
    :preview-key (kbd "M-."))

   ;; Optionally configure the narrowing key.
   ;; Both < and C-+ work reasonably well.
   (setq consult-narrow-key "<") ;; (kbd "C-+")
   (autoload 'projectile-project-root "projectile")
   (setq consult-project-function (lambda (_) (projectile-project-root))))
#+end_src

**** =consult-dir=
#+begin_src elisp
(use-package consult-dir
  :after consult
  :bind (("C-x C-d" . consult-dir)
         :map minibuffer-local-completion-map
         ("C-x C-d" . consult-dir)
         ("C-x C-j" . consult-dir-jump-file)))
#+end_src

**** =consult-eglot=
#+begin_src elisp
(use-package consult-eglot
  :after (consult eglot))
#+end_src

**** =consult-projectile=
#+begin_src elisp
(use-package consult-projectile
  :after (consult projectile))
#+end_src

*** Vertico
#+begin_src elisp
(use-package vertico
  :commands vertico-mode
  :bind
  (:map vertico-map
        ("?" . minibuffer-completion-help)
        ("M-RET" . minibuffer-force-complete-and-exit)
        ("M-TAB" . minibuffer-complete))
  :init
  (vertico-mode))
#+end_src

**** Vertico Extensions
***** Vertico Directory
#+begin_src elisp
(use-package vertico-directory
  :ensure nil
  :after vertico
  :bind (:map vertico-map
              ("RET" . vertico-directory-enter)
              ("DEL" . vertico-directory-delete-char)
              ("M-DEL" . vertico-directory-delete-word))
  :hook (rfn-eshadow-update-overlay . vertico-directory-tidy))
#+end_src

***** Vertico Mouse
#+begin_src elisp
 (use-package vertico-mouse
   :ensure nil
   :after vertico)
#+end_src

*** Orderless
#+begin_src elisp
(use-package orderless
  :demand t
  :init
  (setq completion-styles '(substring orderless basic))
  (setq completion-category-defaults nil)
  (setq completion-category-overrides '((file (styles basic partial-completion))
                                        (eglot (styles . (orderless)))))
  :config
  (setq orderless-component-separator "[ &]")
  (setq completion-styles '(orderless)
        completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src

*** Marginalia
#+begin_src elisp
(use-package marginalia
  :defer t
  :commands marginalia-mode
  :bind (("M-A" . marginalia-cycle)
         :map minibuffer-local-map
         ("M-A" . marginalia-cycle))
  :init (marginalia-mode)
  :config
  (setq marginalia-field-width 100))
#+end_src

*** Corfu
#+begin_src elisp
(use-package corfu
  :demand t
  :config
  (defun corfu-enable-in-minibuffer ()
    "Enable Corfu in the minibuffer if `completion-at-point' is bound."
    (when (where-is-internal #'completion-at-point (list (current-local-map)))
      ;; (setq-local corfu-auto nil) Enable/disable auto completion
      (corfu-mode 1)))
  (add-hook 'minibuffer-setup-hook #'corfu-enable-in-minibuffer)
  (defun corfu-enable-always-in-minibuffer ()
    "Enable Corfu in the minibuffer if Vertico/Mct are not active."
    (unless (or (bound-and-true-p mct--active)
                (bound-and-true-p vertico--input))
      (corfu-mode 1)))
  (add-hook 'minibuffer-setup-hook #'corfu-enable-always-in-minibuffer 1)
  :custom
  (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
  (corfu-auto t)                 ;; Enable auto completion
  (corfu-preselect-first nil)
  (corfu-separator ?\s)          ;; Orderless field separator
  :bind
  ;; Configure SPC for separator insertion
  (:map corfu-map
        ("SPC" . corfu-insert-separator)
        ("M-n" . corfu-next)
        ("M-p" . corfu-previous))
  :init
  (global-corfu-mode))
 #+end_src

*** Emacs Completion Configuration
#+begin_src elisp
(use-package emacs
  :ensure nil
  :init
  ;; TAB cycle if there are only few candidates
  (setq completion-cycle-threshold 3)
  ;; Emacs 28: Hide commands in M-x which do not apply to the current mode.
  ;; Corfu commands are hidden, since they are not supposed to be used via M-x.
  (setq read-extended-command-predicate
        #'command-completion-default-include-p)

  ;; Enable indentation+completion using the TAB key.
  ;; `completion-at-point' is often bound to M-TAB.
  (setq tab-always-indent 'complete))
#+end_src

** Navigation
#+begin_src elisp
(use-package dirvish
  :init
  (dirvish-override-dired-mode)
  :custom
  (dirvish-quick-access-entries ; It's a custom option, `setq' won't work
   '(("h" "~/"                          "Home")
     ("d" "~/dump/"                     "Dump")
     ("m" "/mnt/"                       "Drives")))
  :config
  ;; (dirvish-peek-mode) ; Preview files in minibuffer
  ;; (dirvish-side-follow-mode) ; similar to `treemacs-follow-mode'
  (setq dirvish-mode-line-format
        '(:left (sort symlink) :right (omit yank index)))
  (setq dirvish-attributes
        '(all-the-icons file-time file-size collapse subtree-state vc-state git-msg))
  (setq delete-by-moving-to-trash t)
  (setq dired-listing-switches
        "-l --almost-all --human-readable --group-directories-first --no-group")
  :bind ; Bind `dirvish|dirvish-side|dirvish-dwim' as you see fit
  (("C-c f" . dirvish-fd)
   :map dirvish-mode-map ; Dirvish inherits `dired-mode-map'
   ("a"   . dirvish-quick-access)
   ("f"   . dirvish-file-info-menu)
   ("y"   . dirvish-yank-menu)
   ("N"   . dirvish-narrow)
   ("^"   . dirvish-history-last)
   ("h"   . dirvish-history-jump) ; remapped `describe-mode'
   ("s"   . dirvish-quicksort)    ; remapped `dired-sort-toggle-or-edit'
   ("v"   . dirvish-vc-menu)      ; remapped `dired-view-file'
   ("TAB" . dirvish-subtree-toggle)
   ("M-f" . dirvish-history-go-forward)
   ("M-b" . dirvish-history-go-backward)
   ("M-l" . dirvish-ls-switches-menu)
   ("M-m" . dirvish-mark-menu)
   ("M-t" . dirvish-layout-toggle)
   ("M-s" . dirvish-setup-menu)
   ("M-e" . dirvish-emerge-menu)
   ("M-j" . dirvish-fd-jump)))
#+end_src

** Search, Selection, Pattern Matching, and Regular Expressions
*** =expand-region=
#+begin_src elisp
(use-package expand-region
  :bind ("C-=" . er/expand-region))
#+end_src

*** =anzu=
#+begin_src elisp
(use-package anzu
  :diminish
  :config
  (global-anzu-mode +1))
#+end_src

*** =visual-regexp=
#+begin_src elisp
(use-package visual-regexp
  :bind (("C-c r" . vr/replace)
         ("C-c q" . vr/query-replace)
         ("M-%" . vr/query-replace)
         ("C-c m" . vr/mc-mark)))
(use-package visual-regexp-steroids
  :bind (:map esc-map
              ("C-r" . vr/isearch-backward)
              ("C-s" . vr/isearch-forward)))
#+end_src

*** ripgrep
#+begin_src elisp
(use-package rg :defer t)
#+end_src

*** =multiple-cursors=
#+begin_src elisp
(use-package multiple-cursors
  :bind (("C-S-c C-S-c" . mc/edit-lines)
         ("C->"         . mc/mark-next-like-this)
         ("C-<"         . mc/mark-previous-like-this)
         ("C-c C-<"     . mc/mark-all-like-this)))
#+end_src

** Undo
#+begin_src elisp
(use-package undo-tree
  :diminish
  :init
  (global-undo-tree-mode)
  :config
  (setq undo-tree-auto-save-history t))
#+end_src

** Snippets
#+begin_src elisp
(use-package yasnippet :defer t)
#+end_src

** Terminal Emulation
*** Vterm
#+begin_src elisp
(use-package vterm
  :bind
  (:map vterm-mode-map
        ("C-t" . vterm-send-next-key))
  :config
  (setq vterm-timer-delay 0.01)
  (setq vterm-copy-exclude-prompt t)
  (setq vterm-kill-buffer-on-exit t)
  (setq vterm-max-scrollback 4000)
  :init
  (setq vterm-always-compile-module t))
#+end_src

*** =multi-vterm=
#+begin_src elisp
(use-package multi-vterm
  :commands multi-vterm
  :defines multi-vterm-program
  :functions multi-vterm
  :init
  (add-hook 'vterm-mode-hook (lambda () (hl-line-mode -1)))
  :bind
  (("C-x p t" . multi-vterm-project)
   ("C-c t t" . multi-vterm)
   ("C-c t v" . multi-vterm-dedicated-toggle)
   ("C-c t n" . multi-vterm-next)
   ("C-c t p" . multi-vterm-prev)
   ("s-t n" . multi-vterm-next)
   ("s-t p" . multi-vterm-prev)
   ("s-n" . multi-vterm-next)
   ("s-p" . multi-vterm-prev))
  :config
  (setq multi-vterm-program "/bin/zsh"))
#+end_src

*** Eshell Vterm
#+begin_src elisp
(use-package eshell-vterm
  :load-path "site-lisp/eshell-vterm"
  :after (eshell vterm)
  :commands eshell-vterm-mode
  :config
  (eshell-vterm-mode))
#+end_src

*** =eshell-prompt-extras=
#+begin_src elisp
(use-package eshell-prompt-extras
  :commands (eshell-highlight-prompt eshell-prompt-function)
  :config
  (with-eval-after-load "esh-opt"
    (autoload 'epe-theme-lambda "eshell-prompt-extras")
    (setq eshell-highlight-prompt nil
          eshell-prompt-function 'epe-theme-lambda)))
#+end_src

** Perspective
#+begin_src elisp
(use-package perspective
  :commands persp-mode
  :bind (("C-x b" . persp-switch-to-buffer*)
         ("C-x k" . persp-kill-buffer*)
         ("C-x C-b" . persp-ibuffer)
         ("C-x M-p" . persp-mode-prefix-key))
  :custom
  (persp-mode-prefix-key (kbd "C-c s"))
  :init
  (persp-mode))
#+end_src

** Magit
#+begin_src elisp
(use-package magit :defer t)
#+end_src

*** =magit-todos=
#+begin_src elisp
(use-package magit-todos :after magit)
#+end_src

*** Magit LFS
#+begin_src elisp
(use-package magit-lfs)
#+end_src

** Project Management
#+begin_src elisp
(use-package projectile
  :diminish
  :init
  (setq projectile-mode-line-function '(lambda () (format " [%s]" (projectile-project-name))))
  (projectile-mode +1)
  :bind-keymap (("C-c p" . projectile-command-map)))
#+end_src

** Software Development
*** Tree Sitter
#+begin_src elisp
(use-package tree-sitter)
(use-package tree-sitter-langs)
(global-tree-sitter-mode)
#+end_src
*** EditorConfig
#+begin_src elisp
(use-package editorconfig
  :diminish
  :config
  (editorconfig-mode 1))
#+end_src

*** LSP
**** Eglot
#+begin_src elisp
(use-package eglot
  :defer t)
#+end_src

*** Docker
#+begin_src elisp
(use-package docker
  :bind ("C-c d" . docker))
#+end_src

*** =paredit=
#+begin_src elisp
(use-package paredit)
#+end_src

*** =dart-mode=
#+begin_src elisp
(use-package dart-mode
  :mode "\\.dart\\'")
#+end_src

*** CSS Mode
#+begin_src elisp
(setq css-indent-offset 2)
#+end_src

*** JS Mode
#+begin_src elisp
(setq js-indent-level 2)
#+end_src

*** Web Mode
#+begin_src elisp
(use-package web-mode
  :mode ("\\(\\.html?\\|\\.njk\\)\\'"
         "\\.jsx?$"
         "\\.tsx?$"
         "\\.phtml\\'"
         "\\.tpl\\.php\\'"
         "\\.mustache\\'"
         "\\.djhtml\\'")
  :config
  (setq web-mode-markup-indent-offset 2)
  (setq web-mode-code-indent-offset 2)
  (setq web-mode-css-indent-offset 2)
  (setq web-mode-enable-current-element-highlight t)
  (setq web-mode-enable-current-column-highlight t)
  (setq web-mode-ac-sources-alist
        '(("css" . (ac-source-css-property))
          ("html" . (ac-source-words-in-buffer ac-source-abbrev))))
  (setq web-mode-content-types-alist '(("jsx" . "\\.js[x]?\\'")))
  (setq web-mode-indentation-params '())
  (add-to-list 'web-mode-indentation-params '("lineup-args" . t))
  (add-to-list 'web-mode-indentation-params '("lineup-calls" . t))
  (add-to-list 'web-mode-indentation-params '("lineup-concats" . t))
  (add-to-list 'web-mode-indentation-params '("lineup-quotes" . nil))
  (add-to-list 'web-mode-indentation-params '("lineup-ternary" . t))
  (add-to-list 'web-mode-indentation-params '("case-extra-offset" . t)))
#+end_src

*** JSON Mode
#+begin_src elisp
(use-package json-mode :defer t)
#+end_src

*** YAML Mode
#+begin_src elisp
(use-package yaml-mode :defer t)
#+end_src

*** Elixir Mode
#+begin_src elisp
(use-package elixir-mode)
#+end_src

*** Python
#+begin_src elisp
(use-package python
  :defer t
  :ensure nil
;; :straight (:type built-in)
  :delight (python-mode "py")
  :config
  (setq python-indent-guess-indent-offset nil))
#+end_src

**** Black
#+begin_src elisp
(use-package python-black
  :after python
  :hook (python-mode . python-black-on-save-mode-enable-dwim))
#+end_src

** Org Mode
*** Org Super Agenda
#+begin_src elisp
(use-package org-super-agenda
  :init
  (org-super-agenda-mode)
  :hook (org-agenda-mode . org-super-agenda-mode)
  :config
  (setq org-super-agenda-groups
         '((:name "Priority"
                  :priority "A"
                  :order 1)
           (:name "Work"
                  :tag "work"
                  :order 2)
           (:name "Study Garden"
                  :tag "studygarden"
                  :order 3)
           (:name "Events"
                  :time-grid t
                  :tag "events")
           (:name "Postponed"
                  :todo "POSTPONED"))))
#+end_src

*** Org Indent
#+begin_src elisp
(use-package org-indent
  :ensure nil
;; :straight (:type built-in)
  :defer t
  :config
  (add-hook 'org-indent-mode-hook (lambda () (diminish 'org-indent-mode))))
#+end_src

*** Org CalDAV
#+begin_src elisp
(use-package org-caldav
;; :straight (org-caldav :type git :host github :fork "jackkamm/org-caldav")
  :defer t
  :config
  (setq org-caldav-url "https://next.dao/remote.php/dav/calendars/lao")
  (setq org-caldav-calendar-id "org")
  (setq org-caldav-calendars
        '((:calendar-id "events"
                        :files ("~/org/calendar.org")
                        :inbox "~/org/org-caldav-sync/calendar.org")
          (:calendar-id "todo"
                        :files ("~/org/todo.org")
                        :inbox "~/org/org-caldav-sync/todo.org")))
  (setq org-icalendar-alarm-time 60)
  (setq org-icalendar-include-todo t)
  (setq org-icalendar-use-scheduled '(todo-start event-if-todo event-if-not-todo)))
#+end_src

** Aesthetics
For making Emacs look /good/.

#+begin_src elisp
(setq x-stretch-cursor t ; stretch cursor to size of glyph under it
      x-gtk-resize-child-frames t)
#+end_src

*** Fonts
#+begin_src elisp
(set-face-font 'fixed-pitch-serif "Source Code Pro Medium")
(add-to-list 'default-frame-alist '(font . "JetBrains Mono"))
#+end_src

*** Date and Time
#+begin_src elisp
(setq display-time-24hr-format t) ; military time
(setq display-time-day-and-date t) ; show date and time
#+end_src

*** Fringes
Keep fringes to a minimum:

#+begin_src elisp
(fringe-mode '(1 . 1))
#+end_src

*** Fill Column
#+begin_src elisp
(setq-default fill-column 80)
#+end_src

*** Cursor
#+begin_src elisp
(setq cursor-type 'box)
(setq blink-cursor-mode nil)
(setq-default cursor-in-non-selected-windows nil)
#+end_src

*** Theme
#+begin_src elisp
(load-theme 'minerva t)
#+end_src

*** Mode Line
#+begin_src elisp
(setq column-number-mode t
      display-time-default-load-average nil)
(setq mode-line-format '(("%e"
                          mode-line-front-space
                          sml/pos-id-separator
                          mode-line-client
                          mode-line-modified
                          mode-line-remote
                          mode-line-frame-identification
                          mode-line-buffer-identification
                          sml/pos-id-separator
                          (vc-mode vc-mode)
                          sml/pre-modes-separator
                          mode-line-modes mode-line-misc-info mode-line-end-spaces)))
(use-package smart-mode-line
  :init
  (setq sml/theme nil)
  (setq sml/line-number-format "%3l ")
  (setq sml/col-number-format "%3c")
  (setq sml/mule-info nil)
  (setq sml/shorten-directory t)
  (setq sml/shorten-modes t)
  (setq sml/name-width 32)
  (setq sml/mode-width 'full)
  (setq sml/extra-filler -1)
  (setq sml/directory-truncation-string "")
  (sml/setup))
#+end_src

*** Emojify
#+begin_src elisp
(use-package emojify :defer t)
#+end_src

*** Prettify Symbols
Prettify some Greek symbols.
#+begin_src elisp
(setq-default prettify-symbols-alist
              '(("lambda" . ?Œª)
                ("delta" . ?Œî)
                ("gamma" . ?Œì)
                ("phi" . ?œÜ)
                ("psi" . ?œà)))
#+end_src

*** SVG Tags
#+begin_src elisp
(use-package svg-tag-mode
  :defer t
  :init
  (setq svg-tag-tags '(("TODO" . ((lambda (tag) (svg-tag-make "TODO" :face 'org-todo :inverse t))))
                       ("CANCELLED" . ((lambda (tag) (svg-tag-make "CANCELLED" :face 'org-cancelled :inverse t))))
                       ("DONE" . ((lambda (tag) (svg-tag-make "DONE" :face 'org-done :inverse t)))))))
#+end_src

*** Dashboard
#+begin_src elisp
(use-package dashboard
  :commands dashboard-setup-startup-hook
  :init
  (setq dashboard-startup-banner 'logo)
  (setq dashboard-center-content t)
  (setq dashboard-items '((agenda . 5)
                          (projects . 5)
                          (recents  . 5)
                          (bookmarks . 5)
                          (registers . 5)))
  (setq dashboard-bookmarks-item-format "%s")
  (setq dashboard-footer-messages
        '("Purity of the heart is to will one thing."
          "Every good and every perfect gift is from above."
          "Love shall cover a multitude of sins."))
  (dashboard-setup-startup-hook))
#+end_src

*** Internationalization
#+begin_src elisp
(use-package pangu-spacing
  :diminish pangu-spacing-mode
  :commands global-pangu-spacing-mode
  :init (global-pangu-spacing-mode 1)
  :config (setq pangu-spacing-real-insert-separtor t))
#+end_src

*** Indent Guide
#+begin_src elisp
(use-package highlight-indentation
  :commands  highlight-indentation-mode highlight-indentation-current-column-mode
  :hook ((prog-mode . highlight-indentation-mode)
         (org-mode . highlight-indentation-mode))
  :diminish)
#+end_src

*** Page Break Line
#+begin_src elisp
(use-package page-break-lines
  :diminish
  :commands global-page-break-lines-mode
  :init (global-page-break-lines-mode))
#+end_src

*** =diff-hl=
#+begin_src elisp
(use-package diff-hl
  :defer t
  :config (global-diff-hl-mode))
#+end_src

*** Colors
#+begin_src elisp
(use-package kurecolor
  :defer t)
(use-package ct
  :defer t)
#+end_src

*** Rainbow Mode
For hex colors:

#+begin_src elisp
(use-package rainbow-mode
  :hook ((org-mode . rainbow-mode)
         (prog-mode . rainbow-mode))
  :diminish)
#+end_src

*** Rainbow Delimiters
#+begin_src elisp
(use-package rainbow-delimiters
  :commands rainbow-delimiters-mode
  :hook ((org-mode . rainbow-delimiters-mode)
         (prog-mode . rainbow-delimiters-mode))
  :diminish rainbow-delimiters-mode)
#+end_src

** Miscellaneous
#+begin_src elisp
(use-package dissociate
  :ensure nil
;; :straight (:type built-in)
  :defer t
  :bind
  ("s-D" . dissociated-press))
#+end_src

* Keybindings and Keyboard Macros
#+begin_src elisp
(bind-key "s-o" 'other-window)
(bind-key "M-s-o" 'previous-window-any-frame)
(bind-key "C-c l" 'visual-line-mode)
(bind-key "C-c c i" 'open-init-org-file)
(bind-key "C-c c s" 'open-sway-config)
(bind-key "C-c c t" 'open-minerva-theme-file)
(bind-key "C-c c z" 'open-zshrc-config)
(bind-key "C-<backspace>" (lambda () (interactive (kill-line 0))))
(bind-key "C-c y" 'yank-from-kill-ring)
(bind-key "C-c a" 'org-agenda)
(bind-key "C-h F" 'describe-face)
#+end_src

** Keyboard Macros
#+begin_src elisp
(fset 'km-frames-bottom-right-terminal
   (kmacro-lambda-form [?\C-x ?1 ?\C-x ?3 ?\s-o ?\C-x ?2 ?\s-o ?\C-c ?t ?n] 0 "%d"))
#+end_src

* Appendix
** Glossary
*** Lexical Binding
Lexical binding concerns the valid environment(s) within which a bound
variable can be referenced. A lexically scoped variable is bound only
under the construct in which it is defined.

Compare the output of these two code blocks, the former with lexical binding and
the latter without:
#+begin_src elisp :tangle no :lexical t
(setq first-day-of-the-universe
      (let ((there-be-light "There was light."))
        (lambda () there-be-light)))
(funcall first-day-of-the-universe)
#+end_src

#+begin_src elisp :tangle no :lexical nil
(setq first-day-of-the-universe
      (let ((there-be-light "There was (maybe) light."))
        (lambda () there-be-light)))
(funcall first-day-of-the-universe)
;; error‚Üí  Symbol's value as variable is void: there-be-light
#+end_src

Why is the value of =there-be-light= void in the second code block? It is bound
only within the =let= form.

It's kind of like the air inside of a bubble. It will exist as long as
the bubble maintains its form until the bubble pops. The air will
still exist but it won't be air inside the bubble anymore. Lexically
scoped variables are like that too.

A good question to ask yourself if you want to remember the difference between
lexical and dynamic scoping is this: is the variable "globally" accessible?
